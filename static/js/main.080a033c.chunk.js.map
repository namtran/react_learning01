{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","CardArray","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","console","log","store","fetch","then","response","json","users","onSearchChange","filteredRobots","filter","toLowerCase","includes","length","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","logger","createLogger","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.080a033c.chunk.js","sourcesContent":["import React from 'react';\nconst Card = ({name, email, id}) =>\n{\n\t\n\treturn(\n\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img src={`https://robohash.org/${id}?200x200`} alt='photorobot'  />\n\t\t<div>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t</div>\n\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>\n{\n\t//to see if any error happened un comments these below lines.\n\t//if(true){\n\t//\tthrow new Error('NOOOOO');\n\t//}\n\t//This is more clearer way\n\n\tconst CardArray = robots.map((user, i) => {\n\t\treturn ( \n\t\t\t<Card \n\t\t\t\tkey = {i}\n\t\t\t\tid = {robots[i].id}\n\t\t\t\tname = {robots[i].name}\n\t\t\t\temail = {robots[i].email}\n\t\t\t\t/>\n\n\t\t);\n\t});\n\n\treturn (\n\t\t<div>\n\t\t{CardArray}\n\t\t</div>\n\t\t);\n\t\n\n\t//{\n\t/* This is another way (shorter display)\n\treturn(\n\t<div>\n\t\t{\n\t\trobots.map((user,i) => {\n\t\t\treturn (\n\t\t\t\t<Card \n\t\t\t\t\tkey={i}\n\t\t\t\t\tid = {robots[i].id}\n\t\t\t\t\tname = {robots[i].name}\n\t\t\t\t\temail = {robots[i].email}\n\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t</div>\n\t);\n\t*/\n\t//}\n}\nexport default CardList;","import React from 'react';\nconst SearchBox = ({searchField, searchChange}) => {\n\treturn (\n\t\t<div className='pa2 tc'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--greenbg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '0px solid black', height: '500px'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n}\n\nexport default Scroll;\n","import React, {Component} from 'react';\nclass ErrorBoundary extends Component\n{\n\t\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\t\n\tcomponentDidCatch(error, info)\n\t{\n\t\tthis.setState({hasError: true});\n\t}\n\trender(){\n\t\t\n\t\tif(this.state.hasError)\n\t\t{\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h1>Oooops That is not good</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\t\n\t\treturn this.props.children;\n\t\t\n\t}\n}\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\n//import {robots} from '../robots';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport { setSearchFieldAction } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\t//searchField: state.searchRobotsReducer.searchField\n\t\tsearchField: state.searchField\n\t}\n}\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchFieldAction(event.target.value))\n\t}\n}\nclass App extends Component\n{\n\t\n\tconstructor()\n\t{\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: []\n\t\t}\n\t}\n\tcomponentDidMount()\n\t{\n\t\tconsole.log(this.props.store);\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users =>\n\t\t{\n\t\t\tthis.setState({robots: users});\n\t\t})\n\t\t\n\t}\n\t\n\trender(){\n\t\t//const { robots } = this.state;\n\t\tconst { searchField, onSearchChange } = this.props;\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\tif(this.state.robots.length === 0)\n\t\t{\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h1>Loading</h1>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f2'>Robo Friends</h1>\n\t\t\t\t<SearchBox searchChange={ onSearchChange }/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={ filteredRobots }/>\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t\t}\n\n\t\t\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants';\n\nexport const setSearchFieldAction = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD' ;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\nconst initialState = {\n\n\tsearchField: ''\n}\n\nexport const searchRobotsReducer = (state=initialState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { searchRobotsReducer } from './reducers';\nimport 'tachyons';\n\nimport { createLogger } from 'redux-logger';\n\n\nconst logger = createLogger();\nconst store = createStore(searchRobotsReducer, applyMiddleware(logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n\t,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}